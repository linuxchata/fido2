@page
@model DocumentationModel

<div class="main-container">
    <div class="main-section">
        <div class="main-header">
            <h2>Documentation</h2>
        </div>
        <div class="main-description">
            <h3 id="installation">Installation</h3>
            <p>
                To get started with <b>Shark WebAuthn</b> in your ASP.NET Core application, add the following NuGet packages to your project:
            </p>
            <pre class="code"><code class="language-bash">dotnet add package Shark.Fido2.Core
dotnet add package Shark.Fido2.Models
dotnet add package Shark.Fido2.InMemory
</code></pre>
            <p>
                These packages provide the core WebAuthn functionality, data models, and an in-memory credential repository for development and testing. For production, consider using a persistent credential store instead of the in-memory implementation.
            </p>
        </div>
        <div class="main-description">
            <h3 id="registration">Registration</h3>
            <p>
                To register the WebAuthn services in your ASP.NET Core application, add the following lines to your <code>Program.cs</code> file:
            </p>
            <pre class="code"><code class="language-csharp">builder.Services.AddFido2InMemoryStore();
builder.Services.AddFido2(builder.Configuration);
</code></pre>
            <p>
                <code>AddFido2(builder.Configuration)</code> registers the core WebAuthn services using your application's configuration. <code>AddFido2InMemoryStore()</code> registers an in-memory credential repository, suitable for development and testing. For production, consider using a persistent credential store instead of the in-memory implementation.
            </p>
        </div>
        <div class="main-description">
            <h3 id="configuration">Configuration</h3>
            <p>
                The <code>Shark.Fido2.Core</code> library requires specific configuration to operate as a WebAuthn relying party. Configuration is typically provided via the <code>Fido2Configuration</code> section in your application's configuration files (e.g., <code>appsettings.json</code>, <code>appsettings.Production.json</code>). This section details all available configuration options, their default values, and their intended usage.
            </p>
        </div>
        <div class="main-description">
            <h4>Configuration Schema</h4>
            <p>The following is an example of the server-side configuration.</p>
            <pre class="code"><code class="language-json">{
  "Fido2Configuration": {
    "RelyingPartyId": "example.com",
    "RelyingPartyIdName": "Example Corporation",
    "Origins": [ "https://example.com" ],
    "Timeout": "60000",
    "AllowNoneAttestation": true,
    "AllowSelfAttestation": true,
    "EnableTrustedExecutionEnvironmentOnly": false,
    "EnableMetadataService": true,
    "EnableStrictAuthenticatorVerification": false,
    "MetadataServiceConfiguration": {
      "MetadataBlobLocation": "https://mds3.fidoalliance.org/",
      "RootCertificateLocationUrl": "http://secure.globalsign.com/cacert/root-r3.crt",
      "MaximumTokenSizeInBytes": 6291456
    }
  }
}
</code></pre>
            <p>A minimal server-side configuration example is shown below.</p>
            <pre class="code"><code class="language-json">{
  "Fido2Configuration": {
    "RelyingPartyId": "example.com",
    "RelyingPartyIdName": "Example Corporation",
    "Origins": [ "https://example.com" ]
  }
}
</code></pre>
        </div>
        <div class="main-description">
            <h4>Property Reference</h4>
            <p>Core Configuration</p>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Option</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr><td><code>RelyingPartyId</code></td><td></td><td>Valid domain string identifying the Relying Party on whose behalf a given registration or authentication ceremony is being performed. This is a critical parameter in the WebAuthn protocol. It defines the security scope within which credentials are valid. Therefore, careful selection is essential, as an incorrect or overly broad value can lead to unintended credential reuse or security vulnerabilities.</td></tr>
                    <tr><td><code>RelyingPartyIdName</code></td><td></td><td>Human-palatable identifier for the Relying Party, intended only for display.</td></tr>
                    <tr><td><code>Origins</code></td><td></td><td>List of the fully qualified origins of the Relying Party making the request, passed to the authenticator by the browser.</td></tr>
                    <tr><td><code>Timeout</code></td><td><code>60000</code></td><td>Time, in milliseconds, that the Relying Party is willing to wait for the call to complete.</td></tr>
                    <tr><td><code>AllowNoneAttestation</code></td><td><code>true</code></td><td>Value indicating whether None attestation type is acceptable under Relying Party policy. <a href="https://www.w3.org/TR/webauthn-2/#none" target="_blank">None attestation</a> is used when the authenticator doesn't have any attestation information available.</td></tr>
                    <tr><td><code>AllowSelfAttestation</code></td><td><code>true</code></td><td>Value indicating whether Self attestation type is acceptable under Relying Party policy. <a href="https://www.w3.org/TR/webauthn-2/#self-attestation" target="_blank">Self attestation</a> is used when the authenticator doesn't have a dedicated attestation key pair or a vendor-issued certificate.</td></tr>
                    <tr><td><code>EnableTrustedExecutionEnvironmentOnly</code></td><td><code>true</code></td><td>Value indicating whether the Relying Party trusts only keys that are securely generated and stored in a Trusted Execution Environment (Android Key Attestation).</td></tr>
                    <tr><td><code>EnableMetadataService</code></td><td><code>true</code></td><td>Value indicating whether the Relying Party uses the Metadata Service to verify the attestation object.</td></tr>
                    <tr><td><code>EnableStrictAuthenticatorVerification</code></td><td><code>false</code></td><td>Value indicating whether the Relying Party requires strict verification of authenticators. If enabled, missing metadata for the authenticator would cause attestation to fail.</td></tr>
                </tbody>
            </table>
            <p>FIDO Metadata Service Configuration</p>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Option</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr><td><code>MetadataBlobLocation</code></td><td><code>https://mds3.fidoalliance.org/</code></td><td>Location of the centralized and trusted source of information about FIDO authenticators (Metadata Service BLOB).</td></tr>
                    <tr><td><code>RootCertificateLocationUrl</code></td><td><code>http://secure.globalsign.com/cacert/root-r3.crt</code></td><td>Location of GlobalSign Root R3 for Metadata Service BLOB.</td></tr>
                    <tr><td><code>MaximumTokenSizeInBytes</code></td><td><code>6291456</code></td><td>Maximum token size in bytes that will be processed. This configuration is related to the Metadata Service BLOB size.</td></tr>
                </tbody>
            </table>
        </div>
        <div class="main-description">
            <h4>Configuration Usage</h4>
            <p>
                Add the <code>Fido2Configuration</code> section to your <code>appsettings.json</code> or environment-specific configuration file.
            </p>
        </div>
        <div class="main-description">
            <h4>Best Practices</h4>
            <ul>
                <li><strong>EnableMetadataService</strong> is recommended for production environments to ensure authenticators are validated against the FIDO Metadata Service.</li>
            </ul>
        </div>
        <div class="main-description">
            <h4>Troubleshooting</h4>
            <ul>
                <li>If authentication fails with an "origin" error, verify that the <code>Origins</code> array matches the actual origin of your frontend application.</li>
                <li>If using the Metadata Service, ensure your application can reach the URLs specified in <code>MetadataServiceConfiguration</code>.</li>
            </ul>
        </div>
    </div>
</div> 