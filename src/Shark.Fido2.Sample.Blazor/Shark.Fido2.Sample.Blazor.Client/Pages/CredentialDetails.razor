@page "/credentialdetails"

@using Microsoft.AspNetCore.WebUtilities
@using Shark.Fido2.Sample.Blazor.Client.Abstractions.Services
@using Shark.Fido2.Sample.Blazor.Client.ViewModels

@inject ICredentialClientService CredentialClientService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@implements IDisposable

<PageTitle>Shark WebAuthn .NET library</PageTitle>

<div class="page-container">
    @if (_isLoading)
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <LoadingMessage Message="Loading public key credential details..." />
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <ErrorMessage Message="@_errorMessage" />
            </div>
        </div>
    }
    else if (_credentialDetails != null)
    {
        <h1>You are signed in!</h1>

        <p>You have successfully signed in using WebAuthn! Below, you can review the details of the public key credentials used for your authentication.</p>

        <div class="details-table">
            <CredentialDetailsRow Label="Credential identifier"
                                  Value="@_credentialDetails.CredentialId"
                                  CssClass="credential-id" />
            <CredentialDetailsRow Label="User handle"
                                  Value="@_credentialDetails.UserHandle"
                                  CssClass="user-handle" />
            <CredentialDetailsRow Label="Username"
                                  Value="@_credentialDetails.UserName" />
            <CredentialDetailsRow Label="Display name"
                                  Value="@_credentialDetails.UserDisplayName" />
            <CredentialDetailsRow Label="Sign count"
                                  Value="@_credentialDetails.SignCount.ToString()" />
            <CredentialDetailsRow Label="Algorithm"
                                  Value="@_credentialDetails.Algorithm" />
            @if (_credentialDetails.Transports != null && _credentialDetails.Transports.Any())
            {
                <CredentialDetailsRow Label="Transports"
                                      Value="@string.Join(", ", _credentialDetails.Transports)" />
            }
            <CredentialDetailsRow Label="Time of creation (UTC)"
                                  Value="@_credentialDetails.CreatedAt.ToString(DateTimeFormat)" />
            <CredentialDetailsRow Label="Time of last update (UTC)"
                                  Value="@(_credentialDetails.UpdatedAt?.ToString(DateTimeFormat) ?? "-")" />
            <CredentialDetailsRow Label="Time of last use (UTC)"
                                  Value="@(_credentialDetails.LastUsedAt?.ToString(DateTimeFormat) ?? "-")" />
        </div>
    }
    else
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <ErrorMessage Message="No public key credential details are available." />
            </div>
        </div>
    }
</div>

@code {
    private const string DateTimeFormat = "yyyy-MM-dd HH:mm:ss";

    private bool _isLoading = true;
    private string? _errorMessage;

    private CredentialDetailsViewModel? _credentialDetails = null!;

    private CancellationTokenSource? _cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);
            var credentialId = queryParams.TryGetValue("credentialId", out var values) ? values.FirstOrDefault() : null;

            await LoadCredentialDetails(uri, credentialId, _cancellationTokenSource.Token);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error initializing page: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadCredentialDetails(Uri baseUri, string? credentialId, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(credentialId))
        {
            _errorMessage = "No public key credential details are available. Please sign in first.";
            return;
        }

        var response = await CredentialClientService.Get(baseUri, credentialId, cancellationToken);

        if (response.IsSuccess)
        {
            _credentialDetails = response.Result;
        }
        else
        {
            _errorMessage = response.Message;
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}
