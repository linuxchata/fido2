@page "/details"

@using Microsoft.AspNetCore.WebUtilities
@using Shark.Fido2.Sample.Blazor.Client.Abstractions.Services
@using Shark.Fido2.Sample.Blazor.Client.ViewModels

@inject ICredentialClientService CredentialClientService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@implements IDisposable

<PageTitle>Shark WebAuthn .NET library</PageTitle>

<div class="page-container">
    @if (_isLoading)
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <div class="loading">
                    <p>Loading public key credential details...</p>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <div class="error">
                    <p>@_errorMessage</p>
                </div>
            </div>
        </div>
    }
    else if (_credentialDetails != null)
    {
        <h1>You are signed in!</h1>

        <p>You have successfully signed in using WebAuthn! Below, you can review the details of the public key credentials used for your authentication.</p>

        <table class="details-table">
            <tr>
                <td>Credential identifier</td>
                <td><span class="credential-id">@_credentialDetails.CredentialId</span></td>
            </tr>
            <tr>
                <td>User handle</td>
                <td><span class="user-handle">@_credentialDetails.UserHandle</span></td>
            </tr>
            <tr>
                <td>Username</td>
                <td>@_credentialDetails.UserName</td>
            </tr>
            <tr>
                <td>Display name</td>
                <td>@_credentialDetails.UserDisplayName</td>
            </tr>
            <tr>
                <td>Sign count</td>
                <td>@_credentialDetails.SignCount</td>
            </tr>
            <tr>
                <td>Algorithm</td>
                <td>@_credentialDetails.Algorithm</td>
            </tr>
            @if (_credentialDetails.Transports != null && _credentialDetails.Transports.Any())
            {
                <tr>
                    <td>Transports</td>
                    <td>@string.Join(", ", _credentialDetails.Transports)</td>
                </tr>
            }
            <tr>
                <td>Time of creation (UTC)</td>
                <td>@_credentialDetails.CreatedAt.ToString(DateTimeFormat)</td>
            </tr>
            <tr>
                <td>Time of last update (UTC)</td>
                <td>@(_credentialDetails.UpdatedAt?.ToString(DateTimeFormat) ?? "-")</td>
            </tr>
            <tr>
                <td>Time of last use (UTC)</td>
                <td>@(_credentialDetails.LastUsedAt?.ToString(DateTimeFormat) ?? "-")</td>
            </tr>
        </table>
    }
    else
    {
        <p>No credential details available.</p>
    }
</div>

@code {
    private const string DateTimeFormat = "yyyy-MM-dd HH:mm:ss";

    private bool _isLoading = true;
    private string? _errorMessage;

    private CredentialDetailsViewModel? _credentialDetails = null!;

    private CancellationTokenSource? _cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);
            var credentialId = queryParams.TryGetValue("credentialId", out var values) ? values.FirstOrDefault() : null;

            if (!string.IsNullOrEmpty(credentialId))
            {
                await LoadCredentialDetails(uri, credentialId, _cancellationTokenSource.Token);
            }
            else
            {
                _errorMessage = "No public key credential details are available. Please sign in first.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error initializing page: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadCredentialDetails(Uri baseUri, string credentialId, CancellationToken cancellationToken)
    {
        var response = await CredentialClientService.Get(baseUri, credentialId, cancellationToken);

        if (response.IsSuccess && response.Result is not null)
        {
            _credentialDetails = response.Result;
        }
        else
        {
            _errorMessage = response.Message ??
                "An unknown error occurred while fetching public key credential details.";
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}
