@page "/details"
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@using Shark.Fido2.Sample.Blazor.Client.Abstractions.Services
@using Shark.Fido2.Sample.Blazor.Client.ViewModels
@inject ICredentialClientService CredentialClientService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Shark WebAuthn .NET library</PageTitle>

<div class="page-container">
    @if (isLoading)
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <div class="loading">
                    <p>Loading public key credential details...</p>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <h1>Discoverable Credentials</h1>

        <div class="content-layout">
            <div class="content-area">
                <div class="error">
                    <p>@errorMessage</p>
                </div>
            </div>
        </div>
    }
    else if (credential != null)
    {
        <h1>You are signed in!</h1>

        <p>You have successfully signed in using WebAuthn! Below, you can review the details of the public key credentials used for your authentication.</p>

        <table class="details-table">
            <tr>
                <td>Credential identifier</td>
                <td><span class="credential-id">@credential.CredentialId</span></td>
            </tr>
            <tr>
                <td>User handle</td>
                <td><span class="user-handle">@credential.UserHandle</span></td>
            </tr>
            <tr>
                <td>Username</td>
                <td>@credential.UserName</td>
            </tr>
            <tr>
                <td>Display name</td>
                <td>@credential.UserDisplayName</td>
            </tr>
            <tr>
                <td>Sign count</td>
                <td>@credential.SignCount</td>
            </tr>
            <tr>
                <td>Algorithm</td>
                <td>credential.Algorithm</td>
            </tr>
            <tr>
                <td>Transports</td>
                <td>@(credential.Transports?.Length > 0 ? string.Join(", ", credential.Transports) : "Not specified")</td>
            </tr>
            <tr>
                <td>Time of creation (UTC)</td>
                <td>@credential.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
            </tr>
            <tr>
                <td>Time of last update (UTC)</td>
                <td>@(credential.UpdatedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Never updated")</td>
            </tr>
            <tr>
                <td>Time of last use (UTC)</td>
                <td>@(credential.LastUsedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Never used")</td>
            </tr>
        </table>
    }
    else
    {
        <p>No credential details available.</p>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private CredentialDetailsViewModel? credential = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);
            var credentialId = queryParams.TryGetValue("credentialId", out var values) ? values.FirstOrDefault() : null;

            if (!string.IsNullOrEmpty(credentialId))
            {
                await LoadCredentialDetails(credentialId);
            }
            else
            {
                errorMessage = "No public key credential details are available. Please sign in first.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing page: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCredentialDetails(string credentialId)
    {
        var resultModel = await CredentialClientService.Get(credentialId, CancellationToken.None);

        if (resultModel.IsSuccess && resultModel.Result is not null)
        {
            credential = resultModel.Result;
        }
        else
        {
            errorMessage = resultModel.Message ??
                "An unknown error occurred while fetching public key credential details.";
        }
    }
}
