@page "/details"
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@using Shark.Fido2.Sample.Blazor.Client.ViewModels
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Shark WebAuthn .NET library</PageTitle>

<div class="page-container">
    <h1>You are signed in!</h1>

    <p>You have successfully signed in using WebAuthn! Below, you can review the details of the public key credentials used for your authentication.</p>

    @if (isLoading)
    {
        <div class="loading">
            <p>Loading credential details...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error">
            <p style="color: red;">Error: @errorMessage</p>
        </div>
    }
    else if (credential != null)
    {
        <table class="details-table">
            <tr>
                <td>Credential identifier</td>
                <td><span class="credential-id">@credential.CredentialId</span></td>
            </tr>
            <tr>
                <td>User handle</td>
                <td><span class="user-handle">@credential.UserHandle</span></td>
            </tr>
            <tr>
                <td>Username</td>
                <td>@credential.UserName</td>
            </tr>
            <tr>
                <td>Display name</td>
                <td>@credential.UserDisplayName</td>
            </tr>
            <tr>
                <td>Sign count</td>
                <td>@credential.SignCount</td>
            </tr>
            <tr>
                <td>Algorithm</td>
                <td>credential.Algorithm</td>
            </tr>
            <tr>
                <td>Transports</td>
                <td>@(credential.Transports?.Length > 0 ? string.Join(", ", credential.Transports) : "Not specified")</td>
            </tr>
            <tr>
                <td>Time of creation (UTC)</td>
                <td>@credential.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
            </tr>
            <tr>
                <td>Time of last update (UTC)</td>
                <td>@(credential.UpdatedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Never updated")</td>
            </tr>
            <tr>
                <td>Time of last use (UTC)</td>
                <td>@(credential.LastUsedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Never used")</td>
            </tr>
        </table>
    }
    else
    {
        <p>No credential details available.</p>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private CredentialDetailsViewModel? credential;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);
            var credentialId = queryParams.TryGetValue("credentialId", out var values) ? values.FirstOrDefault() : null;

            if (string.IsNullOrEmpty(credentialId))
            {
                credentialId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "credentialId");
            }

            if (!string.IsNullOrEmpty(credentialId))
            {
                await LoadCredentialDetails(credentialId);
            }
            else
            {
                errorMessage = "No credential ID found. Please sign in again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing page: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCredentialDetails(string credentialId)
    {
        try
        {
            var response = await Http.GetAsync($"api/credentialsdetails/{Uri.EscapeDataString(credentialId)}");

            if (response.IsSuccessStatusCode)
            {
                credential = await response.Content.ReadFromJsonAsync<CredentialDetailsViewModel>();
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to load credential details: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading credential details: {ex.Message}";
        }
    }
}
